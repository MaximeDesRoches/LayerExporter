figma.showUI(__html__);

async function getArtwork(format:'PNG'|'JPG' = 'PNG', resolution = "2") {
	let selected = figma.currentPage.selection[0];
	if (!selected) return;
	
	try {
		return selected.exportAsync({ format, constraint: { type: 'SCALE', value: parseInt(resolution, 10) } }).then(data => {
			return {
				selected,
				data
			};
		}).catch(e => { return e; });
	} catch (err) { return err }
}

function getFrame(node):SceneNode {
	let last = node;
	while(node.parent && node.type != 'PAGE') {
		last = node;
		node = node.parent;
	}
	return last;
}

function getPosition(node, frame, resolution = 2, x = 0, y = 0) {
	if (node === frame) return { x: x, y };
	return getPosition(node.parent, frame, resolution, x + node.x, y + node.y);
}

figma.ui.onmessage = (message) => {
	const { action, data } = JSON.parse(message);
	if (action === 'export') {
		const {
			format,
			resolution
		} = data;

		console.log(data);
		getArtwork(format, resolution).then(r => {
			const selected:SceneNode = r.selected;

			const frame = getFrame(selected);
			let { x, y } = getPosition(selected, frame, parseInt(resolution, 10));
			x *= resolution;
			y *= resolution;

			figma.ui.postMessage({
				data: r.data,
				name: selected.name,
				format,
				resolution,
				rect: {
					x,
					y,
					width: frame.width * resolution,
					height: frame.height * resolution
				},
			});
		});
	}
};

